@page "/servicesorderadd"
@page "/servicesorderadd/{id:guid}"
@using System.Linq;
@using Microsoft.EntityFrameworkCore;
@using AutoRepairShop.DAL.Models;
@using AutoRepairShop.Components.Services;
@using System.Text.Json
@inject ServiceOrderService serviceOrderService
@inject VehicleService vehicleService
@inject ProductService productService

<PageTitle>Cadastro de Ordem de Serviço</PageTitle>

<h3>Cadastro de Ordem de Serviço</h3>

<div class="row col-md-12 d-md-inline-flex">
  <div class="col-md-6">
    <a class="btn btn-secondary" href="ordemservico">
        <i class="fas fa-arrow-left fa-lg text-center justify-content-center fs-5 mt-1"> Voltar</i>
    </a>
    <button class="btn btn-primary active text-center">
        <i class="fas fa-save fa-lg text-center justify-content-center fs-5 mt-1" @onclick = "(() => AddServiceOrder())"> Salvar</i>
    </button>
  </div>
  <div class="col-md-6 d-flex justify-content-end">
    <label class="text-end fs-3">Número: @OrderNumber</label>
  </div>
</div>

<div class="border border-2 border-dark mt-5">
  <div class="m-5">
    <label for="email" class="form-label">Descrição:</label>
    <input type="text" class="form-control" id="nome" placeholder="Nome" name="nome" @bind-value="@serviceOrder.Description">
  </div>
  <div class="m-5 overflow-auto">
    <label for="pwd" class="form-label">Produtos Usados:</label>
    <ul class="list-group ">
      @if(products is not null)
      {
        foreach(var product in products)
        {
          <li class="list-group-item">
            <div class="row col-md-12 d-md-inline-flex">
              <div class="col-md-6">
                <input class="form-check-input me-3 align-middle" type="checkbox" @bind-value="@product.IsSelected">
                  <label class="align-middle mt-1">
                    @product.Name
                  </label>
               </div>
              <div class="col-md-6">
                <input class="form-control me-1 align-middle" type="number" @bind-value="@product.QuantityUsed">
              </div>
            </div>
          </li> 
        }
      }
    </ul>
  </div>
  <div class="m-5">
    <label for="pwd" class="form-label">Veículo:</label>
    <select class="form-select" id="inputGroupSelect01">
      <option selected>Selecione o veículo...</option>
      @if(vehicles is not null)
      {
          foreach(var vehicle in vehicles)
          {
            <option value=@vehicle.Id>@vehicle.Model - @vehicle.Plate</option>
          }
      }
    </select>
  </div>
  <div class="form-check m-5">
    <input class="form-check-input" type="checkbox" id="flexCheckDefault" @bind-value="@serviceOrder.Authorized">
    <label class="form-check-label" for="flexCheckDefault">
      Autorizado
    </label>
  </div>
</div>

@code{

  [Parameter]
  public Guid? id { get; set; }

  public ServiceOrder? serviceOrder { get; set; }

  public List<Vehicle>? vehicles { get; set; }

  public List<Product>? products { get; set; }

  public long OrderNumber = 0;

  protected override async Task OnParametersSetAsync()
  {
      if(id is null)
        serviceOrder = new ServiceOrder();
      else
        serviceOrder = serviceOrderService.GetById(id.Value);
        vehicles = vehicleService.GetAll().ToList();
        products = productService.GetAll().ToList();
        OrderNumber = serviceOrderService.GetMaxOrderNumber() + 1;
        await Task.CompletedTask;
  }

  public async Task AddServiceOrder()
  {
    serviceOrder!.OrderNumber = OrderNumber;
    var usedProducts = products!.FindAll(p => p.IsSelected);
    List<ProductsUsed> usedItens = new();
    foreach(var usedProduct in usedProducts)
    {
      var prod = new ProductsUsed();
      prod.ProductName = usedProduct.Name;
      prod.QuantityUsed = usedProduct.QuantityUsed;
      prod.TotalValue = usedProduct.Value * usedProduct.QuantityUsed;
      usedItens.Add(prod);
    }

    var options = new JsonSerializerOptions { WriteIndented = true };
    string jsonString = JsonSerializer.Serialize<List<ProductsUsed>>(usedItens,options);
    serviceOrder!.ProductsUsed = jsonString;

    await serviceOrderService!.Add(serviceOrder!);
        
    await Task.CompletedTask;
  }
}