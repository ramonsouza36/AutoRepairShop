@page "/clientes"
@using AutoRepairShop.Components.Services
@using AutoRepairShop.DAL.Models
@inject ClientService clientService
@inject NavigationManager navManager;
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Administrador")]

<PageTitle>Clientes</PageTitle>
<AuthorizeView Roles="Administrador">
    <h3>Clientes</h3>

    <a href="clientesadd" class="btn btn-primary active mb-3 text-center" role="button" data-bs-toggle="button" aria-pressed="true">
        <i class="fas fa-plus"> Adicionar</i>
    </a>
    <div>
        <div class="row col-md-12 d-md-inline-flex mt-5">
            <div class="col-md-6">
                <label for="email" class="form-label">Nome:</label>
                <input type="text" class="form-control" id="nome" placeholder="Nome" name="nome" @bind-value="@filter!.Name">
            </div>
            <div class="col-md-6">
                <label for="email" class="form-label">Documento:</label>
                <input type="text" class="form-control" id="nome" placeholder="Documento" name="nome" @bind-value="@filter.Document">
            </div>
        </div>
        <div class="mt-2">
            <button class="btn btn-primary active mb-3 text-center" @onclick="(() => Filter())">
                <i class="fas fa-search justify-content-center mt-1">  Filtro</i>
            </button>
        </div>
    </div>
    <div class="mx-auto mt-5">
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th class="fs-5 text-center">Nome</th>
                    <th class="fs-5 text-center">Documento</th>
                    <th class="fs-5 text-center">Contato</th>
                    <th class="fs-5 d-flex justify-content-end">Opções</th>
                </tr>
            </thead>
            <tbody>
                @if(clients is not null){
                    foreach(var client in filterClients!)
                    {   <tr>
                            <td class="fs-5 text-center">@client.Name</td>
                            <td class="fs-5 text-center">@client.DocumentNumber</td>
                            <td class="fs-5 text-center">@client.Phone</td>
                            <td class="fs-5 text-center"> 
                                <div class="divBotoes d-flex justify-content-end">
                                    <a title="Editar" class="btn btn-secondary text-right float-right me-2" role="button" data-bs-toggle="button" @onclick="(() => Edit(client.Id))">
                                        <i class="fas fa-pencil-alt"></i>
                                    </a>
                                    <a title="Excluir" class="btn btn-danger text-right float-right" role="button" data-bs-toggle="button" @onclick="(() => Delete(client))">
                                        <i class="fas fa-trash-alt"></i>
                                    </a>
                                </div>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
    <div class="row col-md-12">
        <div class="col-md-2">
            <button class="btn btn-secondary" @onclick="(() => Previous())"><i class="fas fa-caret-left fa-lg"/></button>
            <button class="btn btn-secondary" @onclick="(() => Next())"><i class="fas fa-caret-right fa-lg"/></button>    
        </div>
        <div class="col-md-10 text-right">
            <label class="d-flex flex-row-reverse mt-2">@pageCurrent/@pageTotal</label>
        </div>
    </div>

</AuthorizeView>
@code{

    public List<Client>? clients { get; set; }
    public List<Client>? filterClients { get; set; }
    public ClientFilter? filter { get; set; }
    private int pageCurrent = 1;

    private int pageQuantity = 3;
    
    private int pageTotal { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        clients = clientService.GetAll().ToList();
        filterClients = clients.Skip((0 * pageQuantity)).Take(pageQuantity).ToList();
        await Task.CompletedTask;
        filter = new ClientFilter();
        if((clients.Count() % pageQuantity) == 0)
            pageTotal = clients.Count() / pageQuantity;
        else
            pageTotal = (clients.Count() / pageQuantity) + 1;
    }

    public void Filter()
    {
        if(!string.IsNullOrEmpty(filter!.Name))
          filterClients = clients!.Where(v => v.Name!.ToUpper().StartsWith(filter.Name.ToUpper())).ToList();

        else if(!string.IsNullOrEmpty(filter.Document))
          filterClients = clients!.Where(v => v.DocumentNumber!.ToUpper().StartsWith(filter.Document.ToUpper())).ToList();

        else
            filterClients = clientService.GetAll().ToList();

    }

    public void Edit(Guid id)
    {
        navManager.NavigateTo($"/clientesadd/{id}");
    }

    public async Task Delete(Client client)
    {
        await clientService.DeleteAsync(client);
        navManager.Refresh(true);
    }

    private void Next()
    {
        if(pageCurrent == 0)
            pageCurrent = 1;

        if(pageCurrent >= pageTotal)
            pageCurrent = pageTotal-1;
        
        filterClients = clients!.Skip((pageCurrent * pageQuantity)).Take(pageQuantity).ToList();
        
        if(pageCurrent < pageTotal )
            pageCurrent++;
    }

    private void Previous()
    {
        @* if(pageCurrent == pageTotal)
            pageCurrent = pageTotal - 1;
        else if (pageCurrent == 1)
            pageCurrent = 0; *@

        filterClients = clients!.Skip(((pageCurrent-2) * pageQuantity)).Take(pageQuantity).ToList();
        if(pageCurrent > 1 )
            pageCurrent--;
    }
}