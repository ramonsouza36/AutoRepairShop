@page "/usuariosadd"
@page "/usuariosadd/{id:guid}"
@using System.Linq;
@using Microsoft.EntityFrameworkCore;
@using Microsoft.AspNetCore.Identity;
@using System;
@using System.Text;
@using System.Security.Cryptography;
@using AutoRepairShop.Components.Services;
@inject NavigationManager navManager;
@inject UserManager<IdentityUser> userManager;
@inject UserService  userService;
@inject RoleService  roleService;
@rendermode InteractiveServer

<PageTitle>Users</PageTitle>

<div class="container-fluid">
    <h3>Usuários</h3>
</div>
<div>
    <a class="btn btn-secondary" href="usuarios"> 
        <i class="fas fa-arrow-left text-center justify-content-center mt-1"> Voltar</i>
    </a>
    <button class="btn btn-primary active text-center">
        <i class="fas fa-save text-center justify-content-center mt-1" @onclick = "(() => SetUser())"> Salvar</i>
    </button>
</div>
<div class="container-fluid">
    <div class="row col-md-12 d-md-inline-flex mt-5">
        <div class="col-md-4">
            <label class="label">Nome do usuário</label>
            <input class="form-control border-secondary col-md-3" type="text" placeholder="Nome usuário" @bind-value="@user!.UserName"/>
        </div>
        <div class="col-md-4">
            <label class="label">Tipo de usuário</label>
            <select @bind="RoleName" class="form-select border-secondary col-md-4 me-2" type="text" placeholder="Nome Curso">
                @if(string.IsNullOrEmpty(RoleName)){
                    <option value="" selected>Selecione o tipo....</option>
                }
                @if(!string.IsNullOrEmpty(RoleName)){
                    <option value=@RoleName>@RoleName</option>
                }
                @if(roles != null)
                {
                    foreach(var item in roles!)
                    {
                        <option value="@item.Name">@item.Name</option>
                    }
                }
            </select>
        </div>
        <div class="col-md-4">
            <label class="label">Email</label>
            <input class="form-control border-secondary col-md-3" type="text" placeholder="Email" @bind-value="@user.Email"/>
        </div>
    </div>
    @if(user.NormalizedUserName is null)
    {

        <div class="row col-md-12 d-md-inline-flex mt-5">
            <div class="col-md-3">
                <label class="label">Senha</label>
                <div class="input-group align-items-center">
                    <input type="@Type" class="form-control border-secondary col-md-3" @bind-value = "@Password" placeholder="Senha"/>
                    <button class="btn btn-secondary text-white" @onclick="(() => changeType())"><i class="@Class"></i></button>
                </div>        
            </div>
            <div class="col-md-3">
                <label class="label">Confirmar senha</label>
                <div class="input-group align-items-center">
                    <input class="form-control border-secondary col-md-3" type="@TypeConfirmation" placeholder="Confirmar senha" @bind-value="@PasswordConfirmation"/>
                    <button class="btn btn-secondary text-white" @onclick="(() => changeTypeConfirmation())"><i class="@Class"></i></button>
                </div>
            </div>
        </div>
    }
    <div class="accordion m-5" id="accordionExample">
    <div class="accordion-item">
      <h2 class="accordion-header" id="headingOne">
        <button class="accordion-button bg-primary text-white" type="button" data-bs-toggle="collapse" @onclick = "(() => ShowCollapse())" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
          Permissões
        </button>
      </h2>
      <div id="collapseOne" class="accordion-collapse @collapse" aria-labelledby="headingOne" data-bs-parent="#accordionExample">
        <div class="accordion-body">
          <ul class="list-group ">
            @if(UserRoles is not null && UserRoles!.Count != 0)
            {
              foreach(var userRole in UserRoles)
              {
                <li class="list-group-item">
                  <div class="row col-md-12 d-md-inline-flex">
                    <div class="col-md-6">
                      <label class="align-middle mt-1">
                          @userRole
                        </label>
                    </div>
                  </div>
                </li> 
              }
            }
          </ul>
        </div>
      </div>
    </div>
  </div>
</div>

 @code{
    
    public string Password = "";
    public string PasswordConfirmation = "";
    public string Type = "password";
    public string TypeConfirmation = "password";
    public string Class = "fas fa-eye";
    public string ClassConfirmation = "fas fa-eye";
    public string ClassToast { get; set; } = "toast hide";
    public string Message = string.Empty;
    public string RoleName = string.Empty;
    public string Status = string.Empty;
    public List<string>? UserRoles;
    public string collapse = "collapse";
    [Parameter]
    public Guid? id { get; set; }

    public Guid typeId = Guid.Empty;

    public List<IdentityRole>? roles;

    public IdentityRole? role;

    public IdentityUser? user { get; set; }

  protected override async Task OnParametersSetAsync()
  {
      if(id is null)
        user = new IdentityUser();
      else
        user = userService.GetById(id.Value);
        
      roles = roleService.GetAll().ToList();
      var userRoles = await userManager.GetRolesAsync(user);
      UserRoles = userRoles.ToList();
      if(UserRoles.Count != 0)
        RoleName = UserRoles!.FirstOrDefault()!;
    }

  private void changeType()
  {
    if(Type == "password")
    {
        Type = "text";
        Class = "fas fa-eye-slash";
    }
    else
    {
        Type = "password";
        Class = "fas fa-eye";
    }
  }

  private void changeTypeConfirmation()
  {
    if(TypeConfirmation == "password")
    {
        TypeConfirmation = "text";
        ClassConfirmation = "fas fa-eye-slash";
    }
    else
    {
        TypeConfirmation = "password";
        ClassConfirmation = "fas fa-eye";
    }
  }
  private async Task SetUser()
  {
    if(id is null)
        await userService.Add(user!, Password);
    if(!UserRoles!.Any(x => x == RoleName))
        await userService.UserRole(user!, RoleName);
  }

  public void ShowCollapse()
  {
      if(collapse == "collapse")
        collapse = "collapse show";
      else
        collapse = "collapse";
  }
}
