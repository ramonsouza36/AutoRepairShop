@page "/produtos"
@using AutoRepairShop.Components.Services
@using AutoRepairShop.DAL.Models
@inject ProductService productService
@inject NavigationManager navManager
@rendermode InteractiveServer

<PageTitle>Produtos</PageTitle>

<h3>Produtos</h3>

<a href="produtosadd" class="btn btn-primary active mb-3 text-center" role="button" data-bs-toggle="button" aria-pressed="true">
    <i class="fas fa-plus"> Adicionar</i>
</a>
<div>
    <div class="row col-md-12 d-md-inline-flex mt-5">
        <div class="col-md-6">
            <label for="email" class="form-label">Nome Produto:</label>
            <input type="text" class="form-control" id="nome" placeholder="Nome" name="nome" @bind-value="@filter!.Name">
        </div>
        <div class="col-md-6">
            <label for="email" class="form-label">Nome Fabricante:</label>
            <input type="text" class="form-control" id="nome" placeholder="Nome" name="nome" @bind-value="@filter.Supplier">
        </div>
    </div>
    <div class="mt-2">
        <button class="btn btn-primary active mb-3 text-center" @onclick="(() => Filter())">
            <i class="fas fa-search justify-content-center mt-1">  Filtro</i>
        </button>
    </div>
</div>
<div class="mx-auto mt-5">
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th class="fs-5 text-center">Nome</th>
                <th class="fs-5 text-center">Quantidade</th>
                <th class="fs-5 text-center">Valor</th>
                <th class="fs-5 d-flex justify-content-end">Opções</th>
            </tr>
        </thead>
        <tbody>
            @if(filterProducts is not null){
                foreach(var product in filterProducts)
                { 
                    <tr>
                        <td class="fs-5 text-center">@product.Name</td>
                        <td class="fs-5 text-center">@product.Count</td>
                        <td class="fs-5 text-center">R$ @product.Value</td>
                        <td class="fs-5 text-center"> 
                            <div class="divBotoes d-flex justify-content-end">
                                <a title="Editar" class="btn btn-secondary text-right me-2" role="button" data-bs-toggle="button" @onclick="(() => Edit(product.Id))">
                                    <i class="fas fa-pencil-alt"></i>
                                </a>
                                <a title="Excluir" class="btn btn-danger text-right float-right" role="button" data-bs-toggle="button" @onclick="(() => Delete(product))">
                                    <i class="fas fa-trash-alt"></i>
                                </a>
                            </div>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>
<div class="row col-md-12">
    <div class="col-md-2">
        <button class="btn btn-secondary" @onclick="(() => Previous())"><i class="fas fa-caret-left fa-lg"/></button>
        <button class="btn btn-secondary" @onclick="(() => Next())"><i class="fas fa-caret-right fa-lg"/></button>    
    </div>
    <div class="col-md-10 text-right">
        <label class="d-flex flex-row-reverse mt-2">@pageCurrent/@pageTotal</label>
    </div>
</div>


@code{

    public List<Product>? products { get; set; }
    
    public ProductFilter? filter { get; set; }

    public List<Product>? filterProducts { get; set; }
    private int pageCurrent = 1;

    private int pageQuantity = 3;
    
    private int pageTotal { get; set; }


    protected override async Task OnParametersSetAsync()
    {
        products = productService.GetAll().ToList();
        filterProducts = products.Skip((0 * pageQuantity)).Take(pageQuantity).ToList();
        await Task.CompletedTask;
        filter = new ProductFilter();
        if((products.Count() % pageQuantity) == 0)
            pageTotal = products.Count() / pageQuantity;
        else
            pageTotal = (products.Count() / pageQuantity) + 1;
    }

    public void Filter()
    {
        if(!string.IsNullOrEmpty(filter!.Name))
          filterProducts = products!.Where(v => v.Name!.ToUpper().Contains(filter.Name.ToUpper())).ToList();

        else if(!string.IsNullOrEmpty(filter.Supplier))
          filterProducts = products!.Where(v => v.Supplier!.ToUpper().Contains(filter.Supplier.ToUpper())).ToList();

        else
            filterProducts = productService.GetAll().ToList();
    }

    public void Edit(Guid id)
    {
        navManager.NavigateTo($"/produtosadd/{id}");
    }

    public async Task Delete(Product product)
    {
        await productService.DeleteAsync(product);
        navManager.Refresh(true);
    }

    private void Next()
    {
        if(pageCurrent == 0)
            pageCurrent = 1;

        if(pageCurrent >= pageTotal)
            pageCurrent = pageTotal-1;
        
        filterProducts = products!.Skip((pageCurrent * pageQuantity)).Take(pageQuantity).ToList();
        
        if(pageCurrent < pageTotal )
            pageCurrent++;
    }

    private void Previous()
    {
        @* if(pageCurrent == pageTotal)
            pageCurrent = pageTotal - 1;
        else if (pageCurrent == 1)
            pageCurrent = 0; *@

        filterProducts = products!.Skip(((pageCurrent-2) * pageQuantity)).Take(pageQuantity).ToList();
        if(pageCurrent > 1 )
            pageCurrent--;
    }
}