@page "/Login"
@using AutoRepairShop.Components.Services;
@using AutoRepairShop.Components.Pages;
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Identity;
@using System.Security.Claims
@using System.ComponentModel.DataAnnotations
@inject LoginService  loginService;
@inject NavigationManager navManager;
@inject SignInManager<IdentityUser> signInManager;
@inject UserManager<IdentityUser> userManager;
@inject UserService userService;
@inject IHttpContextAccessor httpContextAccessor
@attribute [AllowAnonymous]
<div class="col-md-12">
        <h4 class="text-white d-flex justify-content-center loginLabel fs-1">Login</h4>
        <div class="card-body mt-0">
            <EditForm Model="Input" FormName="loginUser" OnValidSubmit="ValidateLogin">
                <div>
                    @if(!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="bg-danger mb-2 fs-5 text-white text-center">
                            <span>@errorMessage</span>
                        </div>
                    }
                    <div>
                        <div class="form-floating mb-4 ">
                            <InputText @bind-Value="Input.Username" type="text" class="form-control inputLogin border" id="floatingInputFilled" placeholder="username ..." />
                            <label for="floatingInputFilled">Username</label>
                            <span class="form-floating-focused"></span>
                            <ValidationMessage For="@(() => Input.Username)" />
                        </div>
                    </div>
                    <div>
                        <div class="form-floating mb-4 ">
                            <InputText @bind-Value="Input.Password" type="password" class="form-control inputLogin border" id="floatingInputFilled" placeholder="password ..." />
                            <label for="floatingInputFilled">Password</label>
                            <span class="form-floating-focused"></span>
                            <ValidationMessage For="@(() => Input.Password)" />
                        </div>
                    </div>
                    <div class="col-md-12">
                        <button type="submit" class="btn btn-primary waves-effect waves-light col-md-12">Sign In</button>
                    </div>
                </div>
            </EditForm>
        </div>
        
</div>
@code {

    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();


    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpContext is not null)
        {
            if (HttpMethods.IsGet(HttpContext.Request.Method))
            {
                // Clear the existing external cookie to ensure a clean login process
                await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
            }
        }
    }
    public async Task ValidateLogin()
    {
        var identity = new ClaimsIdentity("password");
        var users = userService.GetAll();
        var user = users.FirstOrDefault(u => u.UserName == Input.Username);
        if(user is not null)
        {
            var roles = await userManager.GetRolesAsync(user);
            identity.AddClaim(new Claim(ClaimTypes.Name, user!.UserName!));
            if(roles.Count() > 0)
            {
                foreach(var role in roles)
                    identity.AddClaim(new Claim(ClaimTypes.Role, role));
            }
            var principal = new ClaimsPrincipal(identity);
            var authProperties = new AuthenticationProperties();
            var canLogin = await signInManager.PasswordSignInAsync(Input.Username, Input.Password, Input.RememberMe, lockoutOnFailure: false);  
            if(canLogin.Succeeded)
            {
                navManager.NavigateTo("/");
            } 
            else{
                errorMessage = "Usuário ou senha incorreto!";
            }
        }
        else
        {
            errorMessage = "Usuário ou senha incorreto!";
        }
    }

    private sealed class InputModel
    {
        [Required]
        public string Username { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
} 
