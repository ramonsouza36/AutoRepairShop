@page "/pagamentos"
@using AutoRepairShop.Components.Pages.Modals
@using AutoRepairShop.Components.Services
@using AutoRepairShop.DAL.Models
@using System.Text.Json
@inject ServiceOrderService serviceOrderService
@inject VehicleService vehicleService
@inject ProductService productService
@inject NavigationManager navManager
@rendermode InteractiveServer

<PageTitle>Pagamentos</PageTitle>

<h3>Pagamentos</h3>

    <div>
        <div class="row col-md-12 d-md-inline-flex mt-5">
            <div class="col-md-4">
                <label for="email" class="form-label">Número:</label>
                <input type="text" class="form-control" id="nome" placeholder="Número" name="nome" @bind-value="@filter!.OrderNumber">
            </div>
            <div class="col-md-4">
                <label for="email" class="form-label">Data de Pagamentos:</label>
                <input type="date" class="form-control" id="nome" placeholder="Data" name="nome" @bind-value="@filter.PaymentDate">
            </div>
            <div class="col-md-4">
                <label for="email" class="form-label">Pago:</label>
                <select @bind="filter!.IsPaid"class="form-select" id="inputGroupSelect01">
                        <option value=1 selected>Ambos</option>
                        <option value=2>Sim</option>
                        <option value=3>Não</option>
                </select>
            </div>
        </div>
        <div class="mt-2">
            <button class="btn btn-primary active mb-3 text-center" @onclick="(() => Filter())">
                <i class="fas fa-search justify-content-center mt-1">  Filtro</i>
            </button>
        </div>
    </div>

<div class="mt-5">
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th class="fs-5 text-center">Número</th>
                <th class="fs-5 text-center">Placa - Veículo</th>
                <th class="fs-5 text-center">Pago</th>
                <th class="fs-5 text-center">Data de Pagamento</th>
                <th class="fs-5 d-flex justify-content-end">Opções</th>
            </tr>
        </thead>
        <tbody>
            @if(serviceOrders is not null){
                foreach(var serviceOrder in filterServiceOrders!)
                {   <tr>
                        <td class="fs-5 text-center">@serviceOrder.OrderNumber</td>
                        <td class="fs-5 text-center">@serviceOrder.PlateModel</td>
                        @if(!serviceOrder.Paid){
                            <td class="fs-5 text-center">Não</td>
                        }
                        else
                        {
                            <td class="fs-5 text-center">Sim</td>
                        }
                        <td class="fs-5 text-center">@serviceOrder.PaymentDate.Date.ToString("dd/MM/yyyy")</td>
                        <td class="fs-5 text-center"> 
                            <div class="divBotoes d-flex justify-content-end">
                                <a title="Editar" class="btn btn-secondary text-right float-right me-2" role="button" data-bs-toggle="button" @onclick="(() => Edit(serviceOrder.Id))">
                                    <i class="fas fa-pencil-alt"></i>
                                </a>
                                <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal" @onclick = "(() => OpenModal(serviceOrder.Id))">
                                    <i class="fas fa-dollar-sign"/>
                                </button>
                            </div>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

<PaymentModal @ref="Modal"></PaymentModal>

@code{

    public List<ServiceOrder>? serviceOrders { get; set; }
    
    public List<ServiceOrder>? filterServiceOrders{ get; set; }
    public PaymentFilter? filter { get; set; }
    private PaymentModal? Modal { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        serviceOrders = serviceOrderService.GetAll().OrderByDescending(x => x.OrderNumber).ToList();
        foreach(var serviceOrder in serviceOrders)
        {
            var vehicle = vehicleService.GetById(serviceOrder.VehicleId);
            serviceOrder.PlateModel = vehicle.Plate + " - " + vehicle.Model;
        }

        filter = new PaymentFilter();
        filterServiceOrders = serviceOrders;
        Modal = new PaymentModal();
        await Task.CompletedTask;
    }

    public  void OpenModal(Guid id)
    {
        var serviceOrder = serviceOrderService.GetById(id);
        Modal!.Payment = new PayServiceOrder();
        if(serviceOrder is not null)
            Modal!.Open(serviceOrder);
    }

    public void Edit(Guid id)
    {
        navManager.NavigateTo($"/servicesorderadd/{id}");
    }

    public async Task Delete(ServiceOrder serviceOrder)
    {
        await serviceOrderService.DeleteAsync(serviceOrder);
        navManager.Refresh(true);
    }

    public void Filter()
    {
        if(filter!.OrderNumber is not null)
          filterServiceOrders = serviceOrders!.Where(v => v.OrderNumber! == filter.OrderNumber).ToList();

        else if(filter.PaymentDate is not null)
          filterServiceOrders = serviceOrders!.Where(v => v.PaymentDate.Date == filter.PaymentDate.Value.Date).ToList();
        
        else if(filter.IsPaid > 1)
        {
          if(filter!.IsPaid == 2)
            filterServiceOrders = serviceOrders!.Where(v => v.Paid).ToList();
          if(filter!.IsPaid == 3)
            filterServiceOrders = serviceOrders!.Where(v => !v.Paid).ToList();
        }

        else
            filterServiceOrders = serviceOrders;
    }
}